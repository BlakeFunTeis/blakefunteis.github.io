<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在MySQL中，一句查詢在資料庫底層是如何運作的？</title>
      <link href="/2020/01/05/how-run-a-query-in-mysql/"/>
      <url>/2020/01/05/how-run-a-query-in-mysql/</url>
      
        <content type="html"><![CDATA[<p>平常我們使用MySQL都是進行查詢然後資料庫返回結果</p><pre><code>mysql &gt; SELECT * FROM table WHERE id = 1</code></pre><p>但是我們卻不知道這句查詢語句在MySQL內部的執行過程，所以我們一起來看看MySQL底層對查詢到底做了些什麼事情，這樣當我們碰到一些異常或者問題時，就可以直指本質，更快速的找出問題發生點並解決。</p><pre><code>客戶端 → 連接器 → 分析器 → 優化器 → 執行器            ↘     ↙             查詢緩存</code></pre><h3 id="連接器"><a href="#連接器" class="headerlink" title="連接器"></a>連接器</h3><p>負責建立維持和管理連線、獲取權限。</p><pre><code>mysql -u root -p</code></pre><p>一般來說command line連線的指令會是上述這句，在完成TCP握手之後，連接器會開始驗證你的身份，這時候用的就是你的帳號和密碼。</p><ol><li>如果帳號或者密碼錯誤，你會收到 ”Access denied for user” 的錯誤，然後客戶端（海豚, phpmyadmin, cli, etc….）會結束此條連線請求</li><li>如果帳號密碼皆正確，連接器會到權限資料表查出你擁有的權限，之後這個連接的權限判斷邏輯，都會依賴此時讀到的權限。</li></ol><p>在這邊解釋了，為什麼我們每次修改權限，都需要再次新建連線，才會讀到新的權限配置。</p><p>連接完成後，如果沒有執行任何動作，這條連線就會處於Sleep狀態</p><p><img src="1.png" alt></p><p>那條Sleep連線是我剛剛建立的新連線，各位如果想實際操作，可以建立新連線後，在舊有的連線中使用這句指令</p><pre><code>mysql &gt; show processlist  #查看mysql目前的用戶連線進程</code></pre><p>如果連線太長時間沒有操作，連接器就會自動斷開連線，預設是8小時，如果需要修改可以變更 <strong>wait_tomeout</strong>。</p><p>連接被斷開之後，客戶端再次發送請求的話，就會收到 “Lost connection to MySQL server during query”的錯誤，這時候如果要繼續，就必須要重新建立新連線，然後再執行請求。</p><p>建立連線過程，通常都是比較複雜的，所以建議盡量減少使用建立連線的動作，也就是說盡量使用長連線，但是全部使用長連線的話，有可能會導致MySQL佔用記憶體上漲很快，這是因為MySQL在執行過程中臨時使用的記憶體是管理在連線對象裡面的，這些資源如果沒做其他動作，那麼只有在斷開連線的時候才會釋放，所以如果長時間累積下來，可能會導致記憶體佔用過大，被系統強行kill。</p><p>如何解決這個問題？</p><ol><li>在完成一個佔用大量內存的大查詢後，斷開連線，之後再重建連線。</li><li>如果是使用MySQL 5.7或者是更新的版本，可以使用 mysql_reset_connection，來重新初始化連線，這個過程不需要重連或者是權限驗證，但是他會將連線恢復到剛創建完的狀態</li></ol><h3 id="查詢緩存"><a href="#查詢緩存" class="headerlink" title="查詢緩存"></a>查詢緩存</h3><p>連線完成後，就可以使用SELECT語句，這時候會來到第二步，查詢緩存。</p><p>MySQL得到一句SELECT後，會先到緩存搜尋看看之前是不是有執行過這條查詢，之前執行的語句會以key-value的形式緩存在記憶體中。key是查詢的語句，value則是結果，如果有匹配的緩存，就會直接返回value。如果緩存中沒有，MySQL會進行查詢後，將查詢結果寫進緩存當中。<br>MySQL如果使用查詢緩存返回資料，那麼MySQL就不需要執行後面複雜的操作，這將大大提高這句查詢在MySQL的效率</p><p>但是大多數的情況下，建議不要使用緩存。為什麼呢？</p><ol><li>在一個頻繁會更改的表，在更新的時候該表內所有的緩存都將全部被清空，因此很有可能在未使用到緩存的時候，該表的緩存已經被全部清空了。除非是使用長期不會變動的表，否則不太建議使用查詢緩存。</li><li>MySQL 8.0 已經把緩存功能徹底拔除。</li></ol><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>如果緩存沒有查到你要的結果，那麼就會開始真正執行搜尋語句，首先，MySQL會需要分析你的查詢語句的意思。</p><p>MySQL會抓取關鍵字，以我們一開始的那句為例，SELECT判斷出這是一個搜尋語句，table判斷為表名，id判斷為欄位名。同時也會判斷你這句查詢是否符合MySQL的查詢語法規則。</p><p>如果判斷輸入的MySQL查詢語句是錯的，那麼他就會返回錯誤給客戶端</p><pre><code>1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;how processlist  # 123123123&apos; at line 1, Time: 0.003000s</code></pre><p>一般的語法錯誤會出現在 <strong>use near</strong> 後面</p><h3 id="優化器"><a href="#優化器" class="headerlink" title="優化器"></a>優化器</h3><p>經過了分析器，MySQL已經知道你想做什麼，在開始執行前也需要經過優化器處理。</p><p>優化器主要的工作是當表裡有多個索引，決定使用哪個索引，或者在一個查詢語法裡面有Join的時候，決定各個表的連接順序。優化器工作完成之後，這句的執行流程方式，基本上就已經定型了。</p><h3 id="執行器"><a href="#執行器" class="headerlink" title="執行器"></a>執行器</h3><p>MySQL透過分析器知道你要做什麼，通過優化器知道該如何做，接下來就是要執行查詢語句了。</p><p>開始執行時，會先判斷你是否有對這個表搜尋的權限，如果有查詢緩存，會在緩存返回時，進行權限判斷。如果沒有權限則會返回以下訊息</p><pre><code>mysql &gt; SELECT command denied to user &apos;test&apos;@&apos;localhost&apos; for table &apos;table&apos;</code></pre><p>如果有權限就會打開表繼續執行，打開表的時候，執行器會根據表的引擎去選擇該引擎的接口。</p><p>執行流程</p><ol><li>調用引擎取這個表的第一行，判斷ID是否為1，如果不是則跳過，如果是則將這筆結果保存在結果集內。</li><li>調用引擎取下一筆資料，重複驗證判斷，直至取到這個表的最後一行</li><li>執行器將所有滿足條件的結果返回給客戶端</li></ol><p>到此，這個查詢就已經完成了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-Reverse-Integer</title>
      <link href="/2019/11/13/7-Reverse-Integer/"/>
      <url>/2019/11/13/7-Reverse-Integer/</url>
      
        <content type="html"><![CDATA[<p>Given a 32-bit signed integer, reverse digits of an integer.</p><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p><pre><code>Input: 123Output: 321Input: -123Output: -321Input: 120Output: 21</code></pre><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><pre><code>class Solution {/*** @param Integer $x* @return Integer*/function reverse($x) {    if ($x &lt; 0) {        $x = &apos;-&apos;.substr(strrev($x), 0, -1);    } else {        $x = strrev($x);    }    return $x &gt; 2147483647 || $x &lt; -2147483647        ? 0        : (int)$x;    }}</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://leetcode.com/problems/reverse-integer" title="7. Reverse Integer" target="_blank" rel="noopener">7. Reverse Integer</a><br><a href="https://github.com/BlakeFunTeis/leetcode-php/blob/master/7-Reverse-Integer.php" title="GitHub" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為什麼選擇ReactJS？</title>
      <link href="/2019/11/10/%E7%82%BA%E4%BB%80%E9%BA%BC%E9%81%B8%E6%93%87ReactJS%EF%BC%9F/"/>
      <url>/2019/11/10/%E7%82%BA%E4%BB%80%E9%BA%BC%E9%81%B8%E6%93%87ReactJS%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="React-特色"><a href="#React-特色" class="headerlink" title="React 特色"></a>React 特色</h2><blockquote><p>React（有時叫React.js或ReactJS）是一個為資料提供彩現為HTML視圖的開源JavaScript 庫。React視圖通常採用包含以自訂HTML標記規定的其他組件的組件彩現。React為程式設計師提供了一種子組件不能直接影響外層組件（”data flows down”）的模型，資料改變時對HTML文件的有效更新，和現代單頁應用中組件之間乾淨的分離。 - 維基百科</p></blockquote><p>Facebook 在2013年推出的一種開源前端框架。為了解決前端不斷複雜化，導致的效能瓶頸和維護成本。</p><p>優點：</p><ol><li>元件化，使程式更易於維護</li><li>執行效能高</li><li>單向數據流</li><li>同構</li><li>兼容性強</li><li>跨平台性</li></ol><h2 id="虛擬DOM（Virtual-DOM）"><a href="#虛擬DOM（Virtual-DOM）" class="headerlink" title="虛擬DOM（Virtual DOM）"></a>虛擬DOM（Virtual DOM）</h2><p>React核心思想是從元件出發，他會先在程式端放入一段對應到真實DOM的物件，用來管理所有的資料與邏輯，當元件因為資料而更新的時候，React會重新製作一個新的虛擬DOM樹，然後快速地跟舊的虛擬DOM進行比對，之後將有更新的部分更新到真實DOM上。</p><h2 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h2><p>虛擬DOM的寫法帶來了有別於以往HTML, CSS的開發習慣，全部寫在一起，而是透過物件導向的方式，讓每個開發者可以專心地針對每個元件撰寫功能和邏輯。</p><h2 id="單向資料流"><a href="#單向資料流" class="headerlink" title="單向資料流"></a>單向資料流</h2><p>因為React樹狀化元件的關係，元件和元件之間緊密相連，父元件僅能通過props的方式傳遞至子元件，子元件則沒辦法去修改props裡面的資料。<br>所以通常需要搭配<a href="https://github.com/facebook/flux" target="_blank" rel="noopener">Flux</a>或者<a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener">Redux</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>182-Duplicate-Emails</title>
      <link href="/2019/07/21/182-Duplicate-Emails/"/>
      <url>/2019/07/21/182-Duplicate-Emails/</url>
      
        <content type="html"><![CDATA[<h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>Write a SQL query to find all duplicate emails in a table named Person.</p><pre>+----+---------+| Id | Email   |+----+---------+| 1  | a@b.com || 2  | c@d.com || 3  | a@b.com |+----+---------+</pre><p>For example, your query should return the following for the above table:</p><pre>+---------+| Email   |+---------+| a@b.com |+---------+</pre><h2 id="SQL-Schema"><a href="#SQL-Schema" class="headerlink" title="SQL Schema"></a>SQL Schema</h2><pre>Create table If Not Exists Person (Id int, Email varchar(255))Truncate table Personinsert into Person (Id, Email) values ('1', 'a@b.com')insert into Person (Id, Email) values ('2', 'c@d.com')insert into Person (Id, Email) values ('3', 'a@b.com')</pre><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><pre>SELECT Email FROM PersonGroup by EmailHAVING count(Email) > 1</pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://leetcode.com/problems/duplicate-emails" title="182. Duplicate Emails" target="_blank" rel="noopener">182. Duplicate Emails</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> MySQL </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>620-Not-Boring-Movies</title>
      <link href="/2019/07/21/620-Not-Boring-Movies/"/>
      <url>/2019/07/21/620-Not-Boring-Movies/</url>
      
        <content type="html"><![CDATA[<p>X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.</p><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.</p><h2 id="SQL-Schema"><a href="#SQL-Schema" class="headerlink" title="SQL Schema"></a>SQL Schema</h2><pre><code>Create table If Not Exists cinema (id int, movie varchar(255), description varchar(255), rating float(2, 1))Truncate table cinemainsert into cinema (id, movie, description, rating) values (&apos;1&apos;, &apos;War&apos;, &apos;great 3D&apos;, &apos;8.9&apos;)insert into cinema (id, movie, description, rating) values (&apos;2&apos;, &apos;Science&apos;, &apos;fiction&apos;, &apos;8.5&apos;)insert into cinema (id, movie, description, rating) values (&apos;3&apos;, &apos;irish&apos;, &apos;boring&apos;, &apos;6.2&apos;)insert into cinema (id, movie, description, rating) values (&apos;4&apos;, &apos;Ice song&apos;, &apos;Fantacy&apos;, &apos;8.6&apos;)insert into cinema (id, movie, description, rating) values (&apos;5&apos;, &apos;House card&apos;, &apos;Interesting&apos;, &apos;9.1&apos;)</code></pre><p>For example, table cinema:</p><pre>+---------+-----------+--------------+-----------+|   id    | movie     |  description |  rating   |+---------+-----------+--------------+-----------+|   1     | War       |   great 3D   |   8.9     ||   2     | Science   |   fiction    |   8.5     ||   3     | irish     |   boring     |   6.2     ||   4     | Ice song  |   Fantacy    |   8.6     ||   5     | House card|   Interesting|   9.1     |+---------+-----------+--------------+-----------+</pre><p>For the example above, the output should be:</p><pre>+---------+-----------+--------------+-----------+|   id    | movie     |  description |  rating   |+---------+-----------+--------------+-----------+|   5     | House card|   Interesting|   9.1     ||   1     | War       |   great 3D   |   8.9     |+---------+-----------+--------------+-----------+</pre><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><pre><code># Write your MySQL query statement belowSELECT id, movie, description, rating FROM cinemaWHERE description != &apos;boring&apos;AND (id % 2) = 1order by rating DESC</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://leetcode.com/problems/not-boring-movies" title="620. Not Boring Movies" target="_blank" rel="noopener">620. Not Boring Movies</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> MySQL </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1108-Defanging-an-IP-Address</title>
      <link href="/2019/07/20/1108-Defanging-an-IP-Address/"/>
      <url>/2019/07/20/1108-Defanging-an-IP-Address/</url>
      
        <content type="html"><![CDATA[<p>Given a valid (IPv4) IP <code>address</code>, return a defanged version of that IP address.</p><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>A defanged IP address replaces every period <code>&quot;.&quot;</code> with <code>&quot;[.]&quot;</code>.</p><pre><code>Input: address = &quot;1.1.1.1&quot;Output: &quot;1[.]1[.]1[.]1&quot;Input: address = &quot;255.100.50.0&quot;Output: &quot;255[.]100[.]50[.]0&quot;</code></pre><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><pre><code>class Solution {    /**    * @param String $address    * @return String    */    function defangIPaddr($address) {        $address = explode(&quot;.&quot;, $address);        return $address[0] . &apos;[.]&apos; . $address[1] . &apos;[.]&apos; . $address[2] . &apos;[.]&apos; . $address[3];    }}</code></pre><p>複雜度為 O(1)。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://leetcode.com/problems/defanging-an-ip-address" title="1108. Defanging an IP Address" target="_blank" rel="noopener">1108. Defanging an IP Address</a><br><a href="https://github.com/BlakeFunTeis/leetcode-php/blob/master/1108-Defanging_an_IP_Address.php" title="GitHub" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>595-Big-Countries</title>
      <link href="/2019/07/20/595-Big-Countries/"/>
      <url>/2019/07/20/595-Big-Countries/</url>
      
        <content type="html"><![CDATA[<p>Write a SQL solution to output big countries’ name, population and area.</p><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p><pre><code>+--------------+-------------+--------------+| name         | population  | area         |+--------------+-------------+--------------+| Afghanistan  | 25500100    | 652230       || Algeria      | 37100000    | 2381741      |+--------------+-------------+--------------+</code></pre><h2 id="SQL-Schema"><a href="#SQL-Schema" class="headerlink" title="SQL Schema"></a>SQL Schema</h2><pre><code>Create table If Not Exists World (name varchar(255), continent varchar(255), area int, population int, gdp int)Truncate table Worldinsert into World (name, continent, area, population, gdp) values (&apos;Afghanistan&apos;, &apos;Asia&apos;, &apos;652230&apos;, &apos;25500100&apos;, &apos;20343000000&apos;)insert into World (name, continent, area, population, gdp) values (&apos;Albania&apos;, &apos;Europe&apos;, &apos;28748&apos;, &apos;2831741&apos;, &apos;12960000000&apos;)insert into World (name, continent, area, population, gdp) values (&apos;Algeria&apos;, &apos;Africa&apos;, &apos;2381741&apos;, &apos;37100000&apos;, &apos;188681000000&apos;)insert into World (name, continent, area, population, gdp) values (&apos;Andorra&apos;, &apos;Europe&apos;, &apos;468&apos;, &apos;78115&apos;, &apos;3712000000&apos;)insert into World (name, continent, area, population, gdp) values (&apos;Angola&apos;, &apos;Africa&apos;, &apos;1246700&apos;, &apos;20609294&apos;, &apos;100990000000&apos;)</code></pre><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><pre><code># Write your MySQL query statement belowSELECT name, population, area FROM WorldWHERE population &gt; 25000000OR area &gt; 3000000</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://leetcode.com/problems/big-countries" title="595. Big Countries" target="_blank" rel="noopener">595. Big Countries</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> MySQL </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>771-Jewels and Stones</title>
      <link href="/2019/07/20/771-Jewels-and-Stones/"/>
      <url>/2019/07/20/771-Jewels-and-Stones/</url>
      
        <content type="html"><![CDATA[<p>You’re given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.</p><p>The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so “a” is considered a different type of stone from “A”.</p><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><pre><code>Input: J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;Output: 3Input: J = &quot;z&quot;, S = &quot;ZZ&quot;Output: 0</code></pre><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p><code>S</code> and <code>J</code> will consist of letters and have length at most 50.<br>The characters in <code>J</code> are distinct.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><pre><code>class Solution {    /**    * @param String $J    * @param String $S    * @return Integer    */    function numJewelsInStones($J, $S) {        $count = 0;        $S = str_split($S);        $data = array_count_values($S);        for($i=0; $i&lt;=strlen($J); $i++) {            $count += $data[$J[$i]];        }        return $count;    }}</code></pre><p>複雜度為 <strong>O(n)</strong>。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://leetcode.com/problems/jewels-and-stones" title="771. Jewels and Stones" target="_blank" rel="noopener">771. Jewels and Stones</a><br><a href="https://github.com/BlakeFunTeis/leetcode-php/blob/master/771-Jewels_and_Stones.php" title="GitHub" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PHP模擬蒙提霍爾問題</title>
      <link href="/2019/07/18/%E4%BD%BF%E7%94%A8PHP%E6%A8%A1%E6%93%AC%E8%92%99%E6%8F%90%E9%9C%8D%E7%88%BE%E5%95%8F%E9%A1%8C/"/>
      <url>/2019/07/18/%E4%BD%BF%E7%94%A8PHP%E6%A8%A1%E6%93%AC%E8%92%99%E6%8F%90%E9%9C%8D%E7%88%BE%E5%95%8F%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[<p><strong>蒙提霍爾問題</strong>，亦稱為<strong>蒙特霍問題</strong>或<strong>三門問題</strong>（英文：Monty Hall problem），是一個源自博弈論的數學遊戲問題。<br>問題的名字來自該節目的主持人<a href="https://zh.wikipedia.org/wiki/%E8%92%99%E8%92%82%C2%B7%E9%9C%8D%E5%B0%94" title="蒙蒂·霍爾" target="_blank" rel="noopener">蒙蒂·霍爾</a>。</p><h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>這個遊戲的玩法是：參賽者會看見三扇關閉了的門，其中一扇的後面有一輛汽車或者是獎品，選中後面有車的那扇門就可以贏得該汽車或獎品，而另外兩扇門後面則各藏有一隻山羊。</p><p>當參賽者選定了一扇門，但未去開啟它的時候，知道門後情形的節目主持人會開啟剩下兩扇門的其中一扇，露出其中一隻山羊。主持人其後會問參賽者要不要換另一扇仍然關上的門。</p><p>問題是：換另一扇門會否增加參賽者贏得汽車的機率？如果嚴格按照上述的條件的話，答案是<strong>會</strong>。換門的話，贏得汽車的機率是2/3。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>建立一個類別 <strong>ThreeDoor</strong>，宣告玩家數 <strong>10000</strong>，並且實作Function <strong>run</strong>。</p><pre><code>class ThreeDoor{        private $max_player = 100000;        public function run        {            //TODO: 實作模擬蒙提霍爾問題        }}</code></pre><p>宣告成功與失敗的變數</p><pre><code>public function run{    $yes = 0;    $no = 0;}</code></pre><p>執行迴圈，讓玩家選擇三門中的一門。<br><br>依照遊戲規則，如果玩家選擇的是汽車，那麼主持人就隨意開啟一扇門給他，如果玩家開啟的不是汽車則主持人<strong>必須開啟另外一扇不是汽車的門</strong>給他。</p><pre><code>// 答案    $answer = rand(1, 3);// 選擇$choice = rand(1, 3);// 排除選擇後的選擇$other = [1, 2, 3];unset($other[$choice - 1]);// 如果 選擇等於答案 那麼就任意開一扇門給他if ($choice === $answer) {    $point = array_rand($other) + 1;} else {       //否則 就排除答案的門 開另一扇門給他    $temp = $other;    unset($temp[$answer - 1]);    $temp = array_values($temp);    $point = $temp[0];}</code></pre><p>開始計算玩家換門的話的成功與失敗機率</p><pre><code>// 取得剩餘的那道門，玩家換的話的門$temp = $other;unset($temp[$point - 1]);$temp = array_values($temp);$player_change2 = $temp[0];if ($answer === $player_change2) {    $yes += 1;} elseif ($answer === $choice) {    $no += 1;}echo &quot;換的話，中獎的機率:&quot; . $yes / $this-&gt;max_player . &quot;&lt;br&gt;&quot;;echo &quot;不換的話，中獎的機率:&quot; . $no / $this-&gt;max_player . &quot;&lt;br&gt;&quot;;</code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>程式執行結果</p><pre><code>換的話，中獎的機率:0.66475不換的話，中獎的機率:0.33525</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/BlakeFunTeis/ThreeDoor-PHP/" title="使用PHP模擬蒙提霍爾問題（GitHub" target="_blank" rel="noopener">使用PHP模擬蒙提霍爾問題（GitHub）</a><br><a href="https://zh.wikipedia.org/wiki/%E8%92%99%E6%8F%90%E9%9C%8D%E7%88%BE%E5%95%8F%E9%A1%8C" title="蒙提霍爾問題" target="_blank" rel="noopener">蒙提霍爾問題</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
